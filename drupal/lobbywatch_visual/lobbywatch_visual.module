<?php

/**
 * Implements hook_menu().
 */
function lobbywatch_visual_menu() {
//   dpm('passed');
  $items = array();

  $items['autocomplete/parlamentarier'] = array(
     'title' => 'Autocomplete (simple)',
//     'page callback' => 'drupal_get_form',
//     'page arguments' => array('ajax_example_simple_autocomplete'),
//     'access arguments' => array('access user profiles'),
//     'file' => 'ajax_example_autocomplete.inc',
//     'weight' => 10,
//     'path' => 'parlamentarier/autocomplete',
    'page callback' => 'lobbywatch_visual_parlamentarier_autocomplete',
//     'callback' => 'lobbywatch_visual_parlamentarier_autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['parteiTest'] = array(
    'title' => 'Parteien',
    'page callback' => 'lobbywatch_visual_partei_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    );

  $items['parteiTest/%'] = array(
    'title' => 'Partei',
    'title callback' => 'lobbywatch_visual_page_title',
    'title arguments' => array('Partei: ', '', 'partei', 1),
    'page callback' => 'lobbywatch_visual_partei_id',
    'page arguments' => array(1),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    );

  return $items;
}

/**
* Implements hook_permission().
*/
function lobbywatch_visual_permission() {
  return array(
    'access lobbywatch general content' => array(
      'title' => t('Access general content of the lobbywatch module'),
    )
  );
}

/**
 * Define the form to be returned.
 *
 * Note that drupal passes in two parameters,
 * $form - which holds all of the elements of the form
 * $form_state - a special array of settings & values needed by Drupal
 */
function lobbywatch_visual_form($form, &$form_state) {
  // Now the fun begins. For this simple example,
  // we will only provide two form elements.
  // 1. an input for the friend's email address
  // 2. a submit button
  // You can add as much or as little to this form as
  // needed. See the forms api for all possible elements.

  //TODO support auto submit
  $form['search_field'] = array(
    // #type tells drupal what kind of element to build
    '#type' => 'textfield',
    // we want this field to be required
    '#required' => TRUE,
    // The "label" for this field
    '#title' => t("Parlamentariername"),
    // Optional description
    '#description' => t('Parlamentariername zur Anzeige'),
    '#autocomplete_path' => 'autocomplete/parlamentarier',
    // Autocomplete, autosubmit, ref: https://drupal.org/node/1772490
//     '#attributes' => array('class' => array('auto_submit')),
//     '#attributes' => array('class' => array('use-ajax-submit')),
);

    $form['submit'] = array(
      '#type' => 'submit',
      // #value is the text to display inside the button
      // ctools, autosubmit, ref: https://drupal.org/node/1110222
//       '#attributes' => array('class' => array('use-ajax-submit ctools-auto-submit-click')),
      '#value' => t('Show'),
      );

      return $form;
}

/*
 * Define a validation function that drupal will
 * automatically call when the submit button is pressed.
 *
 * For this example, I will use the valid_email_address()
 * function to verify that the email address looks
 * proper. If it's not, we'll use form_set_error()
 * function to tell drupal we didn't pass validation.
 */
function lobbywatch_visual_form_validate($form, &$form_state) {
  // Drupal stows away all of the form elements into
  // $form_state['values']. We find our 'friends_email'
  // element and assign it to a variable for easy
  // reference.
  $name = $form_state['values']['search_field'];

//   // If it's not a valid email, set an error.
//   if(valid_email_address($email) == 0) {
//     // form_set_error() tells drupal that it should not proceed.
//     // The first parameter is the form element that didn't pass
//     // validation. The second is the message to tell the user.
//     form_set_error('friends_email', t('Not a valid email address'));
//   }
}

/*
 * Define a submit funciton that drupal will
 * automatically call when submit is pressed (and all validators pass)
 */
function lobbywatch_visual_form_submit($form, &$form_state) {
  // Get the email value again
  $item = $form_state['values']['search_field'];
  // Now we call drupal_mail() to send a message to this person.
  // Note that this basically tells drupal to call tellafriend_mail().
//   $message = drupal_mail('tellafriend', 'notify', $email, language_default());
  // Check the message results and let the user know if php was able to sent the email.

  $result = preg_match('/\[([0-9]+)\]$/', $item, $matches);
  if ($result > 0) {
    // If $result is nonzero, we found a match and can use it as the index into $matches.
    $id = $matches[$result];
    // Verify that it's a valid nid.
    drupal_goto("parlamentarier/$id");
//     $node = node_load($nid);
//     if (empty($node)) {
//       form_error($form['node'], t('Sorry, no node with nid %nid can be found', array('%nid' => $nid)));
//       return;
//     }
  }
//   if(!empty($message['result'])) {
//     // TODO drupal goto
//     drupal_set_message(t('You just told your friend about us!'));
//   } else {
//     drupal_set_message(t('There was a problem sending your message', 'error'));
//   }
}

// Ref https://api.drupal.org/api/examples/ajax_example!ajax_example_autocomplete.inc/7
function lobbywatch_visual_parlamentarier_autocomplete($str = '') {

//   return lobbywatch_visual_parlamentarier_list();
  // Use the database we set up earlier
  // Ref: https://drupal.org/node/18429
  db_set_active('lobbywatch');

  try {
    $items = array();
    $sql = "SELECT parlamentarier.anzeige_name, parlamentarier.id FROM v_parlamentarier parlamentarier WHERE parlamentarier.im_rat_bis IS NULL AND parlamentarier.anzeige_name LIKE :str";
    $result = db_query($sql, array(':str' => "%$str%"));

  //   dpm($result, 'result');

    while($record = $result->fetchAssoc()) {
      $item = check_plain($record['anzeige_name']) . " [" . check_plain($record['id']) . "]";
      $items[$item] = $item;
    }
  } finally {
    // Go back to the default database,
    // otherwise Drupal will not be able to access it's own data later on.
    db_set_active();
  }

//   dpm($items, 'items');

  drupal_json_output($items);

  // TODO exit required? it's not in examples
//    exit();
}

function lobbywatch_visual_page_title($prefix, $suffix, $table, $id) {
  return $prefix . lobbywatch_visual_fetch_anzeige_name($table, $id) . $suffix;
}


function lobbywatch_visual_fetch_anzeige_name($table, $id) {
  $url_name = '';

  // Use the database we set up earlier
  // Ref: https://drupal.org/node/18429
  db_set_active('lobbywatch');

  try {
    $sql = "SELECT * FROM v_$table WHERE id=:id";
    $result = db_query($sql, array(':id' => check_plain($id)));

    if ($result) {
      $record = $result->fetchAssoc();
      $url_name = check_plain($record['anzeige_name']);
    }
  } finally {
    // Go back to the default database,
    // otherwise Drupal will not be able to access it's own data later on.
    db_set_active();
  }
  return $url_name;
}


function lobbywatch_visual_anzeige_name_for_url($table, $id) {
  return lobbywatch_visual_clean_for_url(lobbywatch_visual_fetch_anzeige_name($table, $id));
}

function lobbywatch_visual_clean_for_url($name){
  $url_name = preg_replace('/[.,]/i', '', $name);
  $url_name = preg_replace('/[\/]/i', '-', $url_name);
  return check_plain($url_name);
}


  /**
 * TODO
 */
function lobbywatch_visual_partei_list() {
  $markup = t('<p>Liste der Parteien JUHE</p>');
  $markup .= '<ul>';

  // Use the database we set up earlier
  // Ref: https://drupal.org/node/18429
  db_set_active('lobbywatch');

  $result = db_query("SELECT * FROM v_partei partei ORDER BY partei.anzeige_name");

  while ($record = $result->fetchAssoc()) {
    $markup .= '<li><a href="/partei/' . check_plain($record['id']) . '">' . check_plain($record['anzeige_name']) . '</a>';
  }

  $markup .= '</ul>';

  // Go back to the default database,
  // otherwise Drupal will not be able to access it's own data later on.
  db_set_active();

  $build = array();
  $build['terms'] = array(
    '#weight' => -5,
    '#prefix' => '<div class="lobbywatch">',
    '#markup' => $markup,
    '#suffix' => '</div>',
    );

    return $build;
}

function lobbywatch_visual_partei_id($id, $name = '') {

  //   dpm($id, 'id');

  $url_name = lobbywatch_visual_anzeige_name_for_url('partei', $id);
  if ($name !== $url_name) {
    drupal_goto("partei/$id/$url_name");
  }

  $markup = '';

  // Use the database we set up earlier
  // Ref: https://drupal.org/node/18429
  db_set_active('lobbywatch');

  try {
    $sql = "SET SESSION group_concat_max_len=5000;";
    db_query($sql);

  $sql = "SELECT partei.*,
      GROUP_CONCAT(DISTINCT
        CONCAT('<li><a href=\"/parlamentarier/', parlamentarier.id, '\">', parlamentarier.anzeige_name, '</a>',
        ', ', parlamentarier.ratstyp,
        IF(parlamentarier.partei IS NULL, '', CONCAT(', ', parlamentarier.partei)),
        ', ', parlamentarier.kanton
        )
        ORDER BY parlamentarier.anzeige_name
        SEPARATOR ' '
      ) mitglieder
  FROM `v_partei` partei
  LEFT JOIN `v_parlamentarier` parlamentarier
  ON parlamentarier.partei_id = partei.id
  WHERE partei.id=:id
  GROUP BY partei.id";

  $result = db_query($sql, array(':id' => $id));

  //     dpm($result, 'result');

  $record = $result->fetchAssoc();
//   dpm($record, '$record');
  } finally {
    // Go back to the default database,
    // otherwise Drupal will not be able to access it's own data later on.
    db_set_active();
  }
  if ($record) {
    $markup .= '<h2>' . check_plain($record["anzeige_name"]) . '</h2>'
    . '<h3>Mitglieder</h3>'
    . '<ul>'
    . $record['mitglieder']
    . '</ul>';

    $build = array();
    $build['terms'] = array(
      '#weight' => -5,
      '#prefix' => '<div class="lobbywatch">',
      '#markup' => $markup,
      '#suffix' => '</div>',
      );

      return $build;
  } else {
    drupal_goto('partei');
  }

}

