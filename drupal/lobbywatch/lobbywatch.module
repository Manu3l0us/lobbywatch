<?php

// @todo alias für namensänderungen machen
class Constants {

  /** Data tables containing the workflow fields.
   */
  public static $workflow_tables = array(
    'branche' => 'Branche',
    'interessenbindung' => 'Interessenbindung',
    'interessengruppe' => 'Lobbygruppe',
    'in_kommission' => 'In Kommission',
    'kommission' => 'Kommission',
    'mandat' => 'Mandat',
    'organisation' => 'Organisation',
    'organisation_beziehung' => 'Organisation Beziehung',
    'organisation_jahr' => 'Organisationsjahr',
    'parlamentarier' => 'Parlamentarier',
    'partei' => 'Partei',
    'fraktion' => 'Fraktion',
    'rat' => 'Rat',
    'kanton' => 'Kanton',
    'kanton_jahr' => 'Kantonjahr',
    'zutrittsberechtigung' => 'Zutrittsberechtigter',
  );

  /**
   * Connector: kommission_id
   */
  public static $enriched_relations_kommission = array(
      'in_kommission_parlamentarier' => 'Parlamenterier einer Kommission',
  );

  /**
   * Connector: parlamentarier_id
   */
  public static $enriched_relations_parlamentarier = array(
      'in_kommission_liste' => 'Kommissionen für Parlamenterier',
      'interessenbindung_liste' => 'Interessenbindung eines Parlamenteriers',
      'interessenbindung_liste_indirekt' => 'Indirekte Interessenbindungen eines Parlamenteriers',
      'zutrittsberechtigung_mandate' => 'Mandate einer Zutrittsberechtigung (INNER JOIN)',
      'zutrittsberechtigung_mit_mandaten' => 'Mandate einer Zutrittsberechtigung (LFET JOIN)',
      'zutrittsberechtigung_mit_mandaten_indirekt' => 'Indirekte Mandate einer Zutrittsberechtigung (INNER JOIN)',
      'organisation_parlamentarier' => 'Parlamenterier, die eine Interessenbindung zu dieser Organisation haben',
      'organisation_parlamentarier_indirekt' => 'Parlamenterier, die eine indirekte Interessenbindung zu dieser Organisation haben',
      'organisation_parlamentarier_beide' => 'Parlamenterier, die eine Zutrittsberechtiung mit Mandant oder Interessenbindung zu dieser Organisation haben',
      'organisation_parlamentarier_beide_indirekt' => 'Parlamenterier, die eine indirekte Interessenbindung oder indirekte Zutrittsberechtiung mit Mandat zu dieser Organisation haben',
  );

  /**
   * Connector: zutrittsberechtigung_id
   */
  public static $enriched_relations_zutrittsberechtigung = array(
  );

  /**
   * Connector: organisation_id
   */
  public static $enriched_relations_organisation = array(
      'organisation_beziehung_arbeitet_fuer' => 'Organisationen für welche eine PR-Agentur arbeitet.',
      'organisation_beziehung_mitglied_von' => 'Organisationen, in welcher eine Organisation Mitglied ist',
      'organisation_beziehung_muttergesellschaft' => 'Muttergesellschaften',
      'organisation_parlamentarier' => 'Parlamenterier, die eine Interessenbindung zu dieser Organisation haben',
      'organisation_parlamentarier_indirekt' => 'Parlamenterier, die eine indirekte Interessenbindung zu dieser Organisation haben',
      'organisation_parlamentarier_beide' => 'Parlamenterier, die eine Zutrittsberechtiung mit Mandant oder Interessenbindung zu dieser Organisation haben',
      'organisation_parlamentarier_beide_indirekt' => 'Parlamenterier, die eine indirekte Interessenbindung oder indirekte Zutrittsberechtiung mit Mandat zu dieser Organisation haben',
  );

  /**
   * Connector: ziel_organisation_id
   */
  public static $enriched_relations_organisation_inverse = array(
      'organisation_beziehung_auftraggeber_fuer' => 'Organisationen, die eine PR-Firma beauftragt haben',
      'organisation_beziehung_mitglieder' => 'Mitgliedsorganisationen',
      'organisation_beziehung_tochtergesellschaften' => 'Tochtergesellschaften',
  );

  /**
   * Meta tables such as attachments or settings.
   */
  public static $meta_tables = array(
    'parlamentarier_anhang' => 'Parlamentarieranhang',
    'organisation_anhang' => 'Organisationsanhang',
    'zutrittsberechtigung_anhang' => 'Zutrittsberechtigunganhang',
    'settings' => 'Einstellungen',
    'settings_category' => 'Einstellungskategorien',
  );

  /** Internal fields that are confidential. */
  public static $intern_fields = array('notizen', 'updated_visa', 'created_visa', 'autorisiert_visa', 'freigabe_visa', 'eingabe_abgeschlossen_visa', 'kontrolliert_visa', 'symbol_abs', 'photo', 'ALT_kommission', 'ALT_parlam_verbindung');

  /** Internal fields that are confidential. */
  public static $meta_fields = array('updated_date', 'updated_date_unix', 'created_date', 'created_date_unix', 'autorisiert_datum', 'autorisiert_datum_unix', 'freigabe_datum', 'freigabe_datum_unix', 'eingabe_abgeschlossen_datum', 'eingabe_abgeschlossen_datum_unix', 'kontrolliert_datum', 'kontrolliert_datum_unix', );

  /**
   * table name => website alias
   */
  public static $entities_web = array('branche' => 'branche', 'interessengruppe' => 'lobbygruppe', 'kommission' => 'kommission', 'partei' => 'partei',);

  /** Parlamentarier, Zutrittsberechtigung
   * table name => website alias */
  public static $entities_special_web = array('parlamentarier' => 'parlamentarier', 'zutrittsberechtigung' => 'zutrittsberechtigter','organisation' => 'organisation', );

  public static function getAllEntities() {
    return array_merge(Constants::$entities_web, Constants::$entities_special_web);
  }

  public static function getAllEnrichedRelations() {
    return array_merge(Constants::$enriched_relations_kommission, Constants::$enriched_relations_parlamentarier, Constants::$enriched_relations_zutrittsberechtigung, Constants::$enriched_relations_organisation, Constants::$enriched_relations_organisation_inverse);
  }

  public static function getPublicTables() {
    return array_merge($workflow_tables, getAllEnrichedRelations());
  }

  public static function getAllTables() {
    return array_merge(getPublicTables(), $meta_tables);
  }

}

/**
* Implements hook_views_api().
*/
function lobbywatch_views_api() {
  return array(
  'api' => 3,
  'path' => drupal_get_path('module', 'lobbywatch') . '/views',
  );
}
//- See more at: http://www.grasmash.com/article/demystifying-views-api-developers-guide-integrating-views#sthash.t41eZIbU.dpuf

/**
 * Implements hook_menu().
 */
function lobbywatch_menu() {
//   dpm('passed');
  $items = array();

  $items['autocomplete/lobbywatch/search'] = array(
     'title' => 'Autocomplete Suche',
//     'page callback' => 'drupal_get_form',
//     'page arguments' => array('ajax_example_simple_autocomplete'),
//     'access arguments' => array('access user profiles'),
//     'file' => 'ajax_example_autocomplete.inc',
//     'weight' => 10,
//     'path' => 'parlamentarier/autocomplete',
    'page callback' => '_lobbywatch_search_autocomplete',
//     'callback' => '_lobbywatch_parlamentarier_autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access lobbywatch general content'),
    'file' => 'lobbywatch.daten.inc',
  );

//   $items['daten/parlamentarier-old'] = array(
//     'title' => 'Parlamentarier',
//     'page callback' => '_lobbywatch_parlamentarier_list',
//     'access arguments' => array('access lobbywatch general content'),
//     'type' => MENU_CALLBACK,
//     );

  $items['daten/parlamentarier/%/%'] = array(
//     'title' => 'Parlamentarier',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Parlamentarier: ', '', 'parlamentarier', 2, 3),
    'page callback' => '_lobbywatch_parlamentarier_id',
    'page arguments' => array(2, 3),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/parlamentarier/%'] = array(
//     'title' => 'Parlamentarier',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Parlamentarier: ', '', 'parlamentarier', 2),
    // TODO set 'title callback' for adding name
    'page callback' => '_lobbywatch_parlamentarier_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
    );

  $items['daten/organisation'] = array(
    'title' => 'Organisationen',
    'page callback' => '_lobbywatch_organisation_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/organisation/%'] = array(
//     'title' => 'Organisation',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('', '', 'organisation', 2),
    'page callback' => '_lobbywatch_organisation_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/partei'] = array(
    'title' => 'Parteien',
    'page callback' => '_lobbywatch_partei_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/partei/%'] = array(
//     'title' => 'Partei',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Partei: ', '', 'partei', 2),
    'page callback' => '_lobbywatch_partei_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/kommission'] = array(
    'title' => 'Kommissionen',
    'page callback' => '_lobbywatch_kommission_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/kommission/%'] = array(
//     'title' => 'Kommission',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('', ' des National und des Ständerates', 'kommission', 2),
    'page callback' => '_lobbywatch_kommission_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/branche'] = array(
    'title' => 'Branchen',
    'page callback' => '_lobbywatch_branche_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/branche/%'] = array(
//     'title' => 'Branche',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Branche: ', '', 'branche', 2),
    'page callback' => '_lobbywatch_branche_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/lobbygruppe'] = array(
    'title' => 'Lobbygruppen',
    'page callback' => '_lobbywatch_interessengruppe_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/lobbygruppe/%'] = array(
//     'title' => 'Lobbygruppe',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Lobbygruppe: ', '', 'interessengruppe', 2),
    'page callback' => '_lobbywatch_interessengruppe_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/zutrittsberechtigter'] = array(
    'title' => 'Zutrittsberechtigte',
    'page callback' => '_lobbywatch_zutrittsberechtigung_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/zutrittsberechtigter/%'] = array(
//     'title' => 'Zutrittsberechtigte(r)',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Zutrittsberechtigte(r): ', '', 'zutrittsberechtigung', 2),
    'page callback' => '_lobbywatch_zutrittsberechtigung_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['artikel/kategorien'] = array(
    'title' => 'Artikelkategorien', //Kategorienübersicht
    'page callback' => '_lobbywatch_category_list',
    'page arguments' => array('2'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['artikel/lobbygruppen'] = array(
    'title' => 'Artikel zu Lobbygruppen', //Kategorienübersicht
    'page callback' => '_lobbywatch_category_lobby_group_list',
    'page arguments' => array('3'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  return $items;
}

/**
* Implements hook_permission().
*/
function lobbywatch_permission() {
  return array(
    'access lobbywatch general content' => array(
      'title' => t('Access general content of the lobbywatch module'),
    ),
    'access lobbywatch advanced content' => array(
      'title' => t('Access advanced content of the lobbywatch module, e.g. historised data for registered users'),
    ),
    'access lobbywatch unpublished content' => array(
      'title' => t('Access unpublished (nicht freigegeben) content of the lobbywatch module'),
    ),
    'access lobbywatch admin' => array(
      'title' => t('Access admin content of the lobbywatch module'),
    ),
  );
}

/**
 * Blocks of ibex utils.
 *
 * Implements hook_block_info().
 */
function lobbywatch_block_info() {
  $blocks['lobbywatch_search'] = array(
    'info' => t('Lobbywatchsuche'),
    'cache' => DRUPAL_NO_CACHE,
    'weight' => 40,
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function lobbywatch_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'lobbywatch_search':
      $block['subject'] = t('Suchen');
      // Form in a block: http://zerotodrupal.com/content/creating-form-block-drupal-7
      $block['content'] = drupal_get_form('lobbywatch_autocomplete_search_form');
      break;
  }
  return $block;
}

/**
 * Define the form to be returned.
 *
 * Note that drupal passes in two parameters,
 * $form - which holds all of the elements of the form
 * $form_state - a special array of settings & values needed by Drupal
 */
function lobbywatch_autocomplete_search_form($form, &$form_state) {
  // Now the fun begins. For this simple example,
  // we will only provide two form elements.
  // 1. an input for the friend's email address
  // 2. a submit button
  // You can add as much or as little to this form as
  // needed. See the forms api for all possible elements.

  // Autocomplete with min num chars: ref http://drupal.stackexchange.com/questions/78727/enforcing-minimum-number-of-characters-for-autocomplete-path
  $form['search_field'] = array(
    // #type tells drupal what kind of element to build
    '#type' => 'textfield',
    // we want this field to be required
    '#required' => true,
    // The "label" for this field
    '#title' => t("Suche Parlamentarier, Organisationen, Lobbygruppen, …"),
    '#size' => 85,
    '#maxlength' => 300,
    // Optional description
    '#description' => t('Suchtext eingeben, kurz warten und auswählen'),
    '#autocomplete_path' => 'autocomplete/lobbywatch/search',
    // Autocomplete, autosubmit, ref: https://drupal.org/node/1772490
    '#attributes' => array('class' => array('auto_submit'), 'placeholder' => t("Schnellsuche: Suchtext eingeben, kurz warten und auswählen"),
      'title' => t("Suchtext eingeben, kurz warten und auswählen")),
//     '#attributes' =>array()
//     '#attributes' => array('class' => array('use-ajax-submit')),
  );

  $show_type = array('text' => t('Text'), 'graphic' => t('Graphik'));
  $form['result_type'] = array(
      '#type' => 'radios',
      '#title' => t('Darstellung:'),
      '#default_value' => 'text',
      '#options' => $show_type,
//       '#description' => t(''),
      '#access' => user_access('access lobbywatch visual content'), // TODO permission: not really proper to acccess sub module permission, but for the moment it's OK
      '#attributes' => array('class' => array('admin'),
          'title' => t("Sollen die Resultate graphisch angezeigt werden?")),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    // #value is the text to display inside the button
    // ctools, autosubmit, ref: https://drupal.org/node/1110222
//       '#attributes' => array('class' => array('use-ajax-submit ctools-auto-submit-click')),
    '#value' => t('Show'),
  );

  return $form;
}

/*
 * Define a validation function that drupal will
 * automatically call when the submit button is pressed.
 *
 * For this example, I will use the valid_email_address()
 * function to verify that the email address looks
 * proper. If it's not, we'll use form_set_error()
 * function to tell drupal we didn't pass validation.
 */
function lobbywatch_autocomplete_search_form_validate($form, &$form_state) {
  // Drupal stows away all of the form elements into
  // $form_state['values']. We find our 'friends_email'
  // element and assign it to a variable for easy
  // reference.
  $name = $form_state['values']['search_field'];

//   // If it's not a valid email, set an error.
//   if(valid_email_address($email) == 0) {
//     // form_set_error() tells drupal that it should not proceed.
//     // The first parameter is the form element that didn't pass
//     // validation. The second is the message to tell the user.
//     form_set_error('friends_email', t('Not a valid email address'));
//   }
}

/*
 * Define a submit function that drupal will
 * automatically call when submit is pressed (and all validators pass)
 */
function lobbywatch_autocomplete_search_form_submit($form, &$form_state) {
  // Get the email value again
  $search_text = $form_state['values']['search_field'];
  $result_type = $form_state['values']['result_type'];
//   dpm($form_state, '$form_state');
//   dpm($result_type, '$result_type');
  // Now we call drupal_mail() to send a message to this person.
  // Note that this basically tells drupal to call tellafriend_mail().
//   $message = drupal_mail('tellafriend', 'notify', $email, language_default());
  // Check the message results and let the user know if php was able to sent the email.

  $result = preg_match('/\[(\w+)=([0-9]+)\]$/', $search_text, $matches);
  if ($result > 0) {
    // If $result is nonzero, we found a match and can use it as the index into $matches.
    $table = $matches[1]; // check_plain() not necessary
    $id = $matches[2];
    if ($result_type === 'graphic' && in_array($table, array('parlamentarier', 'organisation'), true)) {
//       dpm('graphic', 'type');
//     df("daten/$table/$id", 'goto');
    // Verify that it's a valid nid.
      $options = array('query' => array('id' => $id));
      drupal_goto("daten/grafik/$table", $options);
    } else {
//       dpm('text!!', 'type');
      drupal_goto("daten/$table/$id");
    }
//     $node = node_load($nid);
//     if (empty($node)) {
//       form_error($form['node'], t('Sorry, no node with nid %nid can be found', array('%nid' => $nid)));
//       return;
//     }
  }
}

function lobbywatch_get_parteien($check_unpublished = true) {
  // Cache ref: http://www.lullabot.com/blog/article/beginners-guide-caching-data-drupal-7
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache)) {
    db_set_active('lobbywatch');

    try {
      $sql = "SELECT partei.* FROM v_partei partei WHERE 1 "
          . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND partei.freigabe_datum <= NOW() ' : '') . " ;";

      $result = db_query($sql);

      while ($record = $result->fetchAssoc()) {
        $cache[$record['id']] = $record;
      }
    } finally {
      // Go back to the default database,
      // otherwise Drupal will not be able to access it's own data later on.
      db_set_active();
    }
  }
  return $cache;
}

function lobbywatch_get_kommissionen($check_unpublished = true) {
  // Cache ref: http://www.lullabot.com/blog/article/beginners-guide-caching-data-drupal-7
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache)) {
    db_set_active('lobbywatch');

    try {
      $sql = "SELECT kommission.* FROM v_kommission kommission WHERE 1 "
          . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND kommission.freigabe_datum <= NOW() ' : '') . " ;";

      $result = db_query($sql);

      while ($record = $result->fetchAssoc()) {
        $cache[$record['id']] = $record;
      }
    } finally {
      // Go back to the default database,
      // otherwise Drupal will not be able to access it's own data later on.
      db_set_active();
    }
  }
  return $cache;
}

function lobbywatch_init() {
//     require_once DRUPAL_ROOT . '/sites/lobbywatch.ch/app/common/utils.php';
//     require_once DRUPAL_ROOT . '/sites/lobbywatch.ch/app/settings/settings.php';
}

function lobbywatch_search_info() {
  return array(
      'title' => 'Lobbywatch Daten',
      'path' => 'daten',
//       'conditions_callback' => '_lobbywatch_callback_search_conditions',
  );
}

// function _lobbywatch_callback_search_conditions($keys) {

// }

/**
 * Implements hook_search_access().
 */
function lobbywatch_search_access() {
  return user_access('access lobbywatch general content');
}

/**
 * Implements hook_search_execute().
 */
function lobbywatch_search_execute($keys = NULL, $conditions = NULL) {
  //   return _lobbywatch_parlamentarier_list();
  // Use the database we set up earlier
  // Ref: https://drupal.org/node/18429
  db_set_active('lobbywatch');

  try {
    $find = array();

//     dpm($keys, '$keys');
    $result_type = search_expression_extract($keys, 'type');
    $keys = search_expression_insert($keys, 'type', null); // remove
    // Replace wildcards with MySQL/PostgreSQL wildcards.
    $search_str = preg_replace('!\*+!', '%', $keys);
//     $search_str = '%' . db_like($keys) . '%'
    if (!preg_match('/[%_]/', $search_str)) {
      $search_str = "%$search_str%";
    }
    $table = 'parlamentarier_medium';
    $page = 'parlamentarier';
    $query = db_select("v_$table", $table);
    $query->fields($table, array('id'));
    $query->addExpression("'$page'", 'page');
    $query->addExpression("CONCAT_WS(', ', anzeige_name, rat, partei, kanton)", 'name');
    $query->condition('anzeige_name', $search_str, 'LIKE');
    if (!user_access('access lobbywatch unpublished content')) {
//       $query->where('(im_rat_bis IS NULL OR im_rat_bis > NOW()) AND freigabe_datum <= NOW()');
      $query->condition(db_or()->isNull('im_rat_bis')->where('im_rat_bis > NOW()'));
      $query->where('freigabe_datum <= NOW()');
    }

    $table = 'zutrittsberechtigung_simple';
    $page = 'zutrittsberechtigter';
    $query2 = db_select("v_$table", $table);
    $query2->fields($table, array('id'));
    $query2->addExpression("'$page'", 'page');
    $query2->addExpression("anzeige_name", 'name');
    $query2->condition('anzeige_name', $search_str, 'LIKE');
    if (!user_access('access lobbywatch unpublished content')) {
//       $query->where('(bis IS NULL OR bis > NOW()) AND freigabe_datum <= NOW()');
      $query2->condition(db_or()->isNull('bis')->where('bis > NOW()'));
      $query2->where('freigabe_datum <= NOW()');
    }
    $merged_query = $query->union($query2);

    $table = 'organisation_simple';
    $page = 'organisation';
    $query2 = db_select("v_$table", $table);
    $query2->addExpression("'$table'", 'page');
    $query2->addExpression("anzeige_name", 'name');
    //       $query2->addField("'$table'", "anzeige_name", 'name'); // causes problem with field order
    $query2->fields($table, array('id'));
    $query2->condition('anzeige_name', $search_str, 'LIKE');
    if (!user_access('access lobbywatch unpublished content')) {
      //       $query->where('(im_rat_bis IS NULL OR im_rat_bis > NOW()) AND freigabe_datum <= NOW()');
      $query2->where('freigabe_datum <= NOW()');
    }

    $merged_query = $merged_query->union($query2)->extend('PagerDefault');

    $query2 = db_select("v_$table", $table);
    foreach (Constants::$entities_web as $table => $page) {
      $query2 = db_select("v_$table", $table);
      $query2->addExpression("'$page'", 'page');
      $query2->addExpression("anzeige_name", 'name');
//       $query2->addField("'$table'", "anzeige_name", 'name'); // causes problem with field order
      $query2->fields($table, array('id'));
      $query2->condition('anzeige_name', $search_str, 'LIKE');
      if (!user_access('access lobbywatch unpublished content')) {
//       $query->where('(im_rat_bis IS NULL OR im_rat_bis > NOW()) AND freigabe_datum <= NOW()');
        $query2->where('freigabe_datum <= NOW()');
      }

      $merged_query = $merged_query->union($query2)->extend('PagerDefault');
    }

    $limit_query = db_select($merged_query, 'limit_query');
    $limit_query = $limit_query->range(0, 400);
    $limit_query->fields('limit_query', array('name', 'page', 'id'));

    // Workaround for https://www.drupal.org/node/2303337 / https://www.drupal.org/node/1634908
    $union_query = db_select($limit_query, 'union_query');
    $union_query = $union_query->extend('PagerDefault')->limit(20);
    $union_query->fields('union_query', array('name', 'page', 'id'));
    $query_result = $union_query->execute();

//     dpm((string) $union_query);

    // Workaround for https://www.drupal.org/node/2303337 / https://www.drupal.org/node/1634908
//     $count_query = db_select($merged_query, 'count_query');
//     $count_query->addExpression('COUNT(*)', 'num');

//     dpm((string) $count_query);

//     $paged_query = $merged_query->extend('PagerDefault')->limit(5);
//     $paged_query->setCountQuery($count_query);
//     dpm((string) $paged_query);
//     $query_result = $paged_query->execute();

//     $paged_query = $query->extend('PagerDefault')->limit(5);
//     dpm((string) $paged_query);
//     $query_result = $paged_query->execute();

    $results = array();
    while ($record = $query_result->fetchAssoc()) {
//     foreach ($query_result as $record) {
//        dpm($record, '$record');

      //     if ($result_type === 'graphic') {
      // //       dpm('graphic', 'type');
      // //     df("daten/$table/$id", 'goto');
      //     // Verify that it's a valid nid.
      //       $options = array('query' => array('id' => $id));
      //       drupal_goto("daten/grafik/$table", $options);
      //     } else {
      // //       dpm('text!!', 'type');
      //       drupal_goto("daten/$table/$id");
      //     }

      $result = array(
          'title' => check_plain(ucfirst($record['page']) . ': ' . $record['name']),
          'link' => $result_type === 'graphic'  && in_array($record['page'], array('parlamentarier', 'organisation'), true) ? url('grafik/' . check_plain($record['page']) . '/' . $record['id'], array('absolute' => TRUE)) : url('daten/' . check_plain($record['page']) . '/' . $record['id'], array('absolute' => TRUE)),
          'type' => $record['page'],
          'extra' => '',
          'snippet' => '',
          'language' => 'de',
      );
      $results[] = $result;
    }

    return $results;
  } finally {
    // Go back to the default database,
    // otherwise Drupal will not be able to access it's own data later on.
    db_set_active();
  }
}

// // Ref https://api.drupal.org/api/examples/ajax_example!ajax_example_autocomplete.inc/7
// function _lobbywatch_search_autocomplete($str = '', $check_unpublished = true) {

//   //   return _lobbywatch_parlamentarier_list();
//   // Use the database we set up earlier
//   // Ref: https://drupal.org/node/18429
//   db_set_active('lobbywatch');

//   try {
//     $table_sql = array();
//     $table = 'parlamentarier';
//     $table_sql[] = "SELECT '$table' as page, CONCAT_WS(', ', anzeige_name, rat, partei, kanton) as name, id FROM v_$table WHERE anzeige_name LIKE :str" . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND (im_rat_bis IS NULL OR im_rat_bis > NOW())' : '') . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND freigabe_datum <= NOW()' : '');
//     $table = 'zutrittsberechtigung';
//     $table_sql[] = "SELECT 'zutrittsberechtigter' as page, anzeige_name as name, id FROM v_$table WHERE anzeige_name LIKE :str" . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND (bis IS NULL OR bis > NOW())' : '') . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND freigabe_datum <= NOW()' : '');
//     foreach (Constants::$entities_web as $table => $page) {
//       $table_sql[] = "SELECT '$page' as page, anzeige_name as name, id FROM v_$table WHERE anzeige_name LIKE :str" . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND freigabe_datum <= NOW()' : '');
//     }
//     $sql = 'SELECT tables.* FROM (' . implode("\n UNION \n", $table_sql) . ') tables LIMIT 20;';
//     $result = db_query($sql, array(':str' => "%$str%"));

//     //   dpm($result, 'result');

//     $items = array();
//     while($record = $result->fetchAssoc()) {
//       $key = check_plain($record['name']) . " [" . check_plain($record['page']). '=' . check_plain($record['id']) . "]";
//       $items[$key] = check_plain(ucfirst($record['page']) . ': ' . $record['name']);
//     }
//   } finally {
//     // Go back to the default database,
//     // otherwise Drupal will not be able to access it's own data later on.
//     db_set_active();
//   }

//   //   dpm($items, 'items');

//   drupal_json_output($items);
// }

/**
 * Implements hook_form_search_form_alter.
 *
 * @see https://api.drupal.org/api/drupal/modules!node!node.module/function/node_form_search_form_alter/7
 *
 * @param unknown $form
 * @param unknown $form_state
 * @param unknown $form_id
 */
function lobbywatch_form_search_form_alter(&$form, &$form_state, $form_id) {

//   dpm($form_id, '$form_id');

  if (isset($form['module']) && $form['module']['#value'] == 'lobbywatch' && user_access('access lobbywatch advanced content')) {

    // Add placeholder
    $form['basic']['keys']['#attributes']['placeholder'] = t("Suche Parlamentarier, Organisationen, Lobbygruppen, …");
//     dpm($form, '$form');

    $show_type = array('text' => t('Text'), 'graphic' => t('Graphik'));
    $form['result_type'] = array(
        '#type' => 'radios',
        '#title' => t('Darstellung:'),
        '#default_value' => 'text',
        '#options' => $show_type,
        //       '#description' => t(''),
        '#access' => user_access('access lobbywatch visual content'), // TODO permission: not really proper to acccess sub module permission, but for the moment it's OK
        '#attributes' => array('class' => array('admin'),
          'title' => t("Sollen die Resultate graphisch angezeigt werden?")),
    );
  }

  $form['#validate'][] = '_lobbywatch_search_validate';

}

/**
 * Implements hook_form_search_form_alter.
 *
 * @see https://api.drupal.org/api/drupal/modules!node!node.module/function/node_form_search_form_alter/7
 *
 * @param unknown $form
 * @param unknown $form_state
 * @param unknown $form_id
 */
function lobbywatch_form_search_block_form_alter(&$form, &$form_state, $form_id) {

//   dpm($form_id, '$form_id2');

    // Add placeholder
  $form[$form_id]['#attributes']['placeholder'] = t("Suche Parlamentarier, Organisationen, Lobbygruppen, …");
//   dpm($form, '$form2');

}

/**
 * Callback for validate.
 *
 * @see https://api.drupal.org/api/drupal/modules!node!node.module/function/node_search_validate/7
 */
function _lobbywatch_search_validate($form, &$form_state) {
//   dpm('validate');
//   search_expression_insert($expression, $option);
  // Initialize using any existing basic search keywords.
  $keys = $form_state['values']['processed_keys'];

  // Insert extra restrictions into the search keywords string.
  if (isset($form_state['values']['result_type']) /*&& is_array($form_state['values']['type'])*/) {
    // Retrieve selected types - Form API sets the value of unselected
    // checkboxes to 0.
//     $form_state['values']['result_type'] = array_filter($form_state['values']['result_type']);
//     if (count($form_state['values']['type'])) {
//       $keys = search_expression_insert($keys, 'type', implode(',', array_keys($form_state['values']['type'])));
//     }

  $keys = search_expression_insert($keys, 'type', $form_state['values']['result_type']);
  }

//   if (isset($form_state['values']['term']) && is_array($form_state['values']['term']) && count($form_state['values']['term'])) {
//     $keys = search_expression_insert($keys, 'term', implode(',', $form_state['values']['term']));
//   }
//   if (isset($form_state['values']['language']) && is_array($form_state['values']['language'])) {
//     $languages = array_filter($form_state['values']['language']);
//     if (count($languages)) {
//       $keys = search_expression_insert($keys, 'language', implode(',', $languages));
//     }
//   }
//   if ($form_state['values']['or'] != '') {
//     if (preg_match_all('/ ("[^"]+"|[^" ]+)/i', ' ' . $form_state['values']['or'], $matches)) {
//       $keys .= ' ' . implode(' OR ', $matches[1]);
//     }
//   }
//   if ($form_state['values']['negative'] != '') {
//     if (preg_match_all('/ ("[^"]+"|[^" ]+)/i', ' ' . $form_state['values']['negative'], $matches)) {
//       $keys .= ' -' . implode(' -', $matches[1]);
//     }
//   }
//   if ($form_state['values']['phrase'] != '') {
//     $keys .= ' "' . str_replace('"', ' ', $form_state['values']['phrase']) . '"';
//   }
  if (!empty($keys)) {
    form_set_value($form['basic']['processed_keys'], trim($keys), $form_state);
  }
}

// /**
//  * Implements hook_search_page
//  */
// function lobbywatch_search_page($results) {

// }

