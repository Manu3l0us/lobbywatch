<?php

class Constants {
  public static $workflow_tables = array(
    'branche' => 'Branche',
    'interessenbindung' => 'Interessenbindung',
    'interessengruppe' => 'Lobbygruppe',
    'in_kommission' => 'In Kommission',
    'kommission' => 'Kommission',
    'mandat' => 'Mandat',
    'organisation' => 'Organisation',
    'organisation_beziehung' => 'Organisation Beziehung',
    'organisation_jahr' => 'Organisationsjahr',
    'parlamentarier' => 'Parlamentarier',
    'partei' => 'Partei',
    'fraktion' => 'Fraktion',
    'rat' => 'Rat',
    'kanton' => 'Kanton',
    'kanton_jahr' => 'Kantonjahr',
    'zutrittsberechtigung' => 'Zutrittsberechtigter',
  );

  public static $meta_tables = array(
    'parlamentarier_anhang' => 'Parlamentarieranhang',
    'organisation_anhang' => 'Organisationsanhang',
    'zutrittsberechtigung_anhang' => 'Zutrittsberechtigunganhang',
    'settings' => 'Einstellungen',
    'settings_category' => 'Einstellungskategorien',
  );

  public static $intern_fields = array('notizen', 'updated_visa', 'created_visa', 'autorisiert_visa', 'freigabe_visa', 'eingabe_abgeschlossen_visa', 'kontrolliert_visa', 'symbol_abs', 'photo');


}

/**
* Implements hook_views_api().
*/
function lobbywatch_views_api() {
  return array(
  'api' => 3,
  'path' => drupal_get_path('module', 'lobbywatch') . '/views',
  );
}
//- See more at: http://www.grasmash.com/article/demystifying-views-api-developers-guide-integrating-views#sthash.t41eZIbU.dpuf

/**
 * Implements hook_menu().
 */
function lobbywatch_menu() {
//   dpm('passed');
  $items = array();

  $items['autocomplete/parlamentarier'] = array(
     'title' => 'Autocomplete (simple)',
//     'page callback' => 'drupal_get_form',
//     'page arguments' => array('ajax_example_simple_autocomplete'),
//     'access arguments' => array('access user profiles'),
//     'file' => 'ajax_example_autocomplete.inc',
//     'weight' => 10,
//     'path' => 'parlamentarier/autocomplete',
    'page callback' => '_lobbywatch_parlamentarier_autocomplete',
//     'callback' => '_lobbywatch_parlamentarier_autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access lobbywatch general content'),
    'file' => 'lobbywatch.daten.inc',
  );

//   $items['daten/parlamentarier-old'] = array(
//     'title' => 'Parlamentarier',
//     'page callback' => '_lobbywatch_parlamentarier_list',
//     'access arguments' => array('access lobbywatch general content'),
//     'type' => MENU_CALLBACK,
//     );

  $items['daten/parlamentarier/%'] = array(
    'title' => 'Parlamentarier',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Parlamentarier: ', '', 'parlamentarier', 2),
    // TODO set 'title callback' for adding name
    'page callback' => '_lobbywatch_parlamentarier_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
    );

  $items['daten/parlamentarier/%/%'] = array(
    'title' => 'Parlamentarier',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Parlamentarier: ', '', 'parlamentarier', 2),
    'page callback' => '_lobbywatch_parlamentarier_id',
    'page arguments' => array(2, 3),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/organisation'] = array(
    'title' => 'Organisationen',
    'page callback' => '_lobbywatch_organisation_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/organisation/%'] = array(
    'title' => 'Organisation',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Organisation: ', '', 'organisation', 2),
    'page callback' => '_lobbywatch_organisation_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/partei'] = array(
    'title' => 'Parteien',
    'page callback' => '_lobbywatch_partei_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/partei/%'] = array(
    'title' => 'Partei',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Partei: ', '', 'partei', 2),
    'page callback' => '_lobbywatch_partei_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/kommission'] = array(
    'title' => 'Kommissionen',
    'page callback' => '_lobbywatch_kommission_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/kommission/%'] = array(
    'title' => 'Kommission',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Kommission: ', '', 'kommission', 2),
    'page callback' => '_lobbywatch_kommission_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/branche'] = array(
    'title' => 'Branchen',
    'page callback' => '_lobbywatch_branche_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/branche/%'] = array(
    'title' => 'Branche',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Branche: ', '', 'branche', 2),
    'page callback' => '_lobbywatch_branche_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/lobbygruppe'] = array(
    'title' => 'Lobbygruppen',
    'page callback' => '_lobbywatch_interessengruppe_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/lobbygruppe/%'] = array(
    'title' => 'Lobbygruppe',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Lobbygruppe: ', '', 'interessengruppe', 2),
    'page callback' => '_lobbywatch_interessengruppe_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/zutrittsberechtigter'] = array(
    'title' => 'Zutrittsberechtigte',
    'page callback' => '_lobbywatch_zutrittsberechtigung_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/zutrittsberechtigter/%'] = array(
    'title' => 'Zutrittsberechtigte(r)',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Zutrittsberechtigte(r): ', '', 'zutrittsberechtigung', 2),
    'page callback' => '_lobbywatch_zutrittsberechtigung_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['artikel/kategorien'] = array(
    'title' => 'Artikelkategorien', //Kategorienübersicht
    'page callback' => '_lobbywatch_category_list',
    'page arguments' => array('2'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['artikel/lobbygruppen'] = array(
    'title' => 'Artikel zu Lobbygruppen', //Kategorienübersicht
    'page callback' => '_lobbywatch_category_lobby_group_list',
    'page arguments' => array('3'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  return $items;
}

/**
* Implements hook_permission().
*/
function lobbywatch_permission() {
  return array(
    'access lobbywatch general content' => array(
      'title' => t('Access general content of the lobbywatch module'),
    ),
    'access lobbywatch unpublished content' => array(
      'title' => t('Access unpublished (nicht freigegeben) content of the lobbywatch module'),
    )
  );
}

/**
 * Blocks of ibex utils.
 *
 * Implements hook_block_info().
 */
function lobbywatch_block_info() {
  $blocks['parlamentarier_search'] = array(
    'info' => t('Parlamentariersuche'),
    'cache' => DRUPAL_NO_CACHE,
    'weight' => 40,
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function lobbywatch_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'parlamentarier_search':
      $block['subject'] = t('Parlamentariersuche');
      // Form in a block: http://zerotodrupal.com/content/creating-form-block-drupal-7
      $block['content'] = drupal_get_form('lobbywatch_form');
      break;
  }
  return $block;
}

/**
 * Define the form to be returned.
 *
 * Note that drupal passes in two parameters,
 * $form - which holds all of the elements of the form
 * $form_state - a special array of settings & values needed by Drupal
 */
function lobbywatch_form($form, &$form_state) {
  // Now the fun begins. For this simple example,
  // we will only provide two form elements.
  // 1. an input for the friend's email address
  // 2. a submit button
  // You can add as much or as little to this form as
  // needed. See the forms api for all possible elements.

  //TODO support auto submit
  $form['search_field'] = array(
    // #type tells drupal what kind of element to build
    '#type' => 'textfield',
    // we want this field to be required
    '#required' => TRUE,
    // The "label" for this field
    '#title' => t("Parlamentariername"),
    // Optional description
//     '#description' => t('Parlamentariername zur Anzeige'),
    '#autocomplete_path' => 'autocomplete/parlamentarier',
    // Autocomplete, autosubmit, ref: https://drupal.org/node/1772490
    '#attributes' => array('class' => array('auto_submit')),
//     '#attributes' => array('class' => array('use-ajax-submit')),
);

    $form['submit'] = array(
      '#type' => 'submit',
      // #value is the text to display inside the button
      // ctools, autosubmit, ref: https://drupal.org/node/1110222
//       '#attributes' => array('class' => array('use-ajax-submit ctools-auto-submit-click')),
      '#value' => t('Show'),
      );

      return $form;
}

/*
 * Define a validation function that drupal will
 * automatically call when the submit button is pressed.
 *
 * For this example, I will use the valid_email_address()
 * function to verify that the email address looks
 * proper. If it's not, we'll use form_set_error()
 * function to tell drupal we didn't pass validation.
 */
function lobbywatch_form_validate($form, &$form_state) {
  // Drupal stows away all of the form elements into
  // $form_state['values']. We find our 'friends_email'
  // element and assign it to a variable for easy
  // reference.
  $name = $form_state['values']['search_field'];

//   // If it's not a valid email, set an error.
//   if(valid_email_address($email) == 0) {
//     // form_set_error() tells drupal that it should not proceed.
//     // The first parameter is the form element that didn't pass
//     // validation. The second is the message to tell the user.
//     form_set_error('friends_email', t('Not a valid email address'));
//   }
}

/*
 * Define a submit funciton that drupal will
 * automatically call when submit is pressed (and all validators pass)
 */
function lobbywatch_form_submit($form, &$form_state) {
  // Get the email value again
  $item = $form_state['values']['search_field'];
  // Now we call drupal_mail() to send a message to this person.
  // Note that this basically tells drupal to call tellafriend_mail().
//   $message = drupal_mail('tellafriend', 'notify', $email, language_default());
  // Check the message results and let the user know if php was able to sent the email.

  $result = preg_match('/\[([0-9]+)\]$/', $item, $matches);
  if ($result > 0) {
    // If $result is nonzero, we found a match and can use it as the index into $matches.
    $id = $matches[$result];
    // Verify that it's a valid nid.
    drupal_goto("daten/parlamentarier/$id");
//     $node = node_load($nid);
//     if (empty($node)) {
//       form_error($form['node'], t('Sorry, no node with nid %nid can be found', array('%nid' => $nid)));
//       return;
//     }
  }
//   if(!empty($message['result'])) {
//     // TODO drupal goto
//     drupal_set_message(t('You just told your friend about us!'));
//   } else {
//     drupal_set_message(t('There was a problem sending your message', 'error'));
//   }
}

/*
 *   if (!user_access('bypass node access')) {
// If the user is able to view their own unpublished nodes, allow them to
// see these in addition to published nodes. Check that they actually have
// some unpublished nodes to view before adding the condition.
if (user_access('view own unpublished content') && $own_unpublished = db_query('SELECT nid FROM {node} WHERE uid = :uid AND status = :status', array(':uid' => $GLOBALS['user']->uid, ':status' => NODE_NOT_PUBLISHED))->fetchCol()) {
$query->condition(db_or()
    ->condition('n.status', NODE_PUBLISHED)
    ->condition('n.nid', $own_unpublished, 'IN')
);
}
else {
// If not, restrict the query to published nodes.
$query->condition('n.status', NODE_PUBLISHED);
}
}


*/

function lobbywatch_get_parteien($check_unpublished = true) {
  // Cache ref: http://www.lullabot.com/blog/article/beginners-guide-caching-data-drupal-7
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache)) {
    db_set_active('lobbywatch');

    try {
      $sql = "SELECT partei.* FROM v_partei partei WHERE 1 "
          . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND partei.freigabe_datum <= NOW() ' : '') . " ;";

      $result = db_query($sql);

      while ($record = $result->fetchAssoc()) {
        $cache[$record['id']] = $record;
      }
    } finally {
      // Go back to the default database,
      // otherwise Drupal will not be able to access it's own data later on.
      db_set_active();
    }
  }
  return $cache;
}

function lobbywatch_get_kommissionen($check_unpublished = true) {
  // Cache ref: http://www.lullabot.com/blog/article/beginners-guide-caching-data-drupal-7
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache)) {
    db_set_active('lobbywatch');

    try {
      $sql = "SELECT kommission.* FROM v_kommission kommission WHERE 1 "
          . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND kommission.freigabe_datum <= NOW() ' : '') . " ;";

      $result = db_query($sql);

      while ($record = $result->fetchAssoc()) {
        $cache[$record['id']] = $record;
      }
    } finally {
      // Go back to the default database,
      // otherwise Drupal will not be able to access it's own data later on.
      db_set_active();
    }
  }
  return $cache;
}

function lobbywatch_init() {
    require_once DRUPAL_ROOT . '/sites/lobbywatch.ch/app/common/utils.php';
    require_once DRUPAL_ROOT . '/sites/lobbywatch.ch/app/settings/settings.php';
}
